import asyncio
from datetime import datetime

from TelegramBot.keyboards.main import get_menu_kb
from TelegramBot.helpers.cron import message_state
from TelegramBot.logging import LOGGER

from aiogram import Bot
from aiogram import Router, F
from aiogram.types import (
    Message, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery,
    
)
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import BufferedInputFile

from TelegramBot.helpers.admin_filter import IsAdmin
from TelegramBot.config import ADMINS, CHAT_ID

import re
import io
import qrcode

default_router = Router()
message_time_router = Router()
pre_checkout_failed_reason = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ—Ç –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –¥–µ–Ω–µ–≥ üò≠"
pre_checkout_ok_reason = "–í–∞—à–∏ –¥–µ–Ω–µ–∂–∫–∏ —É –Ω–∞—Å"

@message_time_router.message()
async def save_message_time(message: Message) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
    """
    message_state.last_message_time = message.date
    LOGGER(__name__).info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.date}")

default_router.include_router(message_time_router)

@default_router.message(CommandStart())
async def default_handler(message: Message) -> None:
    await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –≥–æ–≤–æ—Ä—é –ø–æ-—Ä—É—Å—Å–∫–∏.', )

@default_router.message(Command('test_k'))
async def cmd_start_2(message: Message):
    button = InlineKeyboardButton(text="Test", callback_data="test_me")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    await message.reply("Just a test", reply_markup=keyboard)

@default_router.message(Command('qr'))
async def cmd_qr(message: Message):
    if not message.reply_to_message is not None:
        return message.reply(""" –î—Ä—É–∂–∏—â–µ, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π""")

    if not re.findall(r'(https?://[^\s]+)', message.reply_to_message.text):
        return message.reply(""" –î—Ä—É–∂–∏—â–µ, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π""")

    url = re.findall(r'(https?://[^\s]+)', message.reply_to_message.text)
    qr = qrcode.QRCode(
    version=1,
    error_correction=qrcode.constants.ERROR_CORRECT_L,
    box_size=10,
    border=4,
    )
    qr.add_data(url[0])
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    buf.seek(0) 

    await message.reply_photo(photo = BufferedInputFile(file=buf.getvalue(),filename="qr.png"))
